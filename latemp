#!/usr/bin/env bash

configFile=$HOME/.latemprc

# Read the config file
n=0
while read config;
do
	case $config in
		# Skip blank lines and lines starting with #
		''|\#*) continue ;;
	esac
	# Strip up to first equal sign
	config="${config#*=}"

	# Remove leading whitespace characters
	config="${config#"${config%%[![:space:]]*}"}"

	# Remove trailing whitespace characters
	config="${config%"${config##*[![:space:]]}"}"

	# Add to list of configs
	configs[$n]="$config"
	n=$((n+1))
done < "$configFile"

templateDirectory=${configs[0]}
editor=${configs[1]}
pdfViewer=${configs[2]}

# Check if the $editor is terminalbased.
# If you have a terminalbased editor not on the list, just add it.
case $editor in
	vim|emacs|nano) terminalBasedEditor=1 ;;
	*) terminalBasedEditor=0 ;;
esac

# Populate template dictionary
n=0
# Expand ~ to $HOME
templateDirectory="${templateDirectory/#\~/$HOME}"
for filePath in $templateDirectory/*.tex;
do
	# Check if template directory exists
	# If not found, break
	[ -d "$templateDirectory" ] && noDirectory=false || (noDirectory=true; break;)

	# Check if the glob gets expanded to existing files.
	# If not, filepath will be exactly the pattern above
	# and the exists test will evaluate to false.
	# If not found, break
	[ -e "$filePath" ] && noFiles=false || (noFiles=true; break;)

	# Strip the file extension
	pathToBase=${filePath%.tex}

	# Name of the whole file, ##*/ removes everything up to the last /
	name=${filePath##*/}
	# Removes the trailing .tex
	base=${name%.tex}

	# Save file path with the key of template name
	# If on old bash, make a normal array to where separation between key and value will be ::
	templateBase[$n]=$base
	templatePathToBase[$n]=$pathToBase

	# If value entered was found, remember which template
	# If no value was entered, this is always false
	if  [ "$1" = "${base}" ]; then
		indexOfTemplate=$n
	fi
	n=$((n+1))
done

function printOptions {
	cat <<- EOF
		--- Current settings ---

		Editor: $editor
		Pdf viewer: $pdfViewer

		--- Available templates ---

	EOF
	if [ "$noDirectory" = false ]; then
		# Extract available templates and their file location
		if [ "$noFiles" = false ]; then
			# Iterate over templates and find their corresponding file path
			for ((n=0; $n < ${#templateBase[@]}; n++)); do
				echo "${templateBase[n]}, File location: ${templatePathToBase[n]}.tex"
			done
		else
			echo "No template files were found in $templateDirectory"
		fi
	else
		echo "No template directory found. Looked in $templateDirectory"
	fi
	echo
	exit 0
}

# Check so that there is only two inputs
# One for the template used, and one for the new name of the file
# Cannot be moved earlier since printOptions need the info about the template directory
if [ $# -lt 2 ] || [ $# -gt 2 ]; then
	printOptions
fi

# Check if any templates where found.
# If they were, then $indexOfTemplate is defined
if [ -z ${indexOfTemplate:+x} ]; then
	echo "Input didn't correspond to any available templates"
	echo
	printOptions
else
	# There exists an available template so it's safe to access
	pathToBasename=${templatePathToBase[$indexOfTemplate]}

	# Copy template to the current directory
	# If there is an already compiled pdf, copy that aswell
	# This only helps with an overview of the template
	if [ -f $pathToBasename.pdf ]; then
		cp $pathToBasename.tex "./$2.tex"
		cp $pathToBasename.pdf "./$2.pdf"
	else
		cp $pathToBasename.tex "./$2.tex"
	fi

	# Check if Mac or Linux
	case "$(uname)" in
		Darwin)
			if [ $terminalBasedEditor -eq 1 ]; then
				# Opens $pdfViewer if a pdf exists
				if [ -f ./$2.pdf ]; then
					$pdfViewer ./$2.pdf &
				fi

				# Open $editor with input and output from/to current tty
				$editor ./$2.tex < $(tty) > $(tty)
			else
				# Open $editor from the Applications folder on mac
				open -a $editor ./$2.tex
			fi
			;;
		Linux)
			if [ $terminalBasedEditor -eq 1 ]; then
				# Opens $pdfViewer if a pdf exists
				if [ -f ./$2.pdf ]; then
					$pdfViewer ./$2.pdf &
				fi

				# Open $editor with output to current tty and input from current tty
				$editor ./$2.tex < $(tty) > $(tty)
			else
				$editor ./$2.tex
			fi
			;;
	esac

fi
